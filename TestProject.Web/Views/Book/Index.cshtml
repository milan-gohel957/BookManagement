<div class="w-100 d-flex justify-content-between">
    <h1>Books</h1>
    <div class="d-flex flex-row gap-2 align-items-center">
        <form class="nosubmit search-form d-block mr-4">
            <input class="search" type="search" placeholder="Search..." id="search-input" />
        </form>
        @if (User.IsInRole("Admin"))
        {
            <button class="btn btn-primary" onclick="getAddBookPage()">Add Book</button>
        }
    </div>
</div>
<div id="pagination">

</div>
<div id="modalContainer">

</div>

@section Scripts {
    <script>

        let isCreateForm = true;
        let deleteBookId = 0;
        let userId = parseInt("@(User.FindFirst(ClaimTypes.NameIdentifier)?.Value)");
        let paginationObj = {
            page: 1,
            pageSize: 5,
            search: "",
            order: "",
            isAscending: true
        }

        $("#search-input").change(function () {
            paginationObj.search = $("#search-input").val();
            debounce(function () {
                updateBookPagination();
            }, 400)();
        })

        function debounce(func, delay) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    func.apply(this, args);
                }, delay);
            };
        }
        function handleOrderBy(id) {
            if (id === paginationObj.order) {
                paginationObj.isAscending = !paginationObj.isAscending;
            }
            else {
                paginationObj.isAscending = true
            }

            paginationObj.order = id;
            updateBookPagination();
        }
        updateBookPagination();
        function loadNextPage() {
            paginationObj.page = paginationObj.page + 1;
            updateBookPagination();
        }
        function loadPreviousPage() {
            paginationObj.page -= 1;
            updateBookPagination();
        }
        function changePageSize() {
            paginationObj.pageSize = parseInt($("#pageSize").val());
            updateBookPagination();
        }

        function updateBookPagination() {
            $.get("/Book/BookPagination", { ...paginationObj }, function (data, status) {
                if (status === "success") {
                    if (data.status === false) {
                        toastr.error(data.message)
                    }

                    $("#pagination").html(data);
                    $("#pageSize").val(paginationObj.pageSize)
                }
            })
        }

        function getAddBookPage() {
            $.get("/Book/ShowUpsertBookModal", { bookId: 0 }, function (data, status) {

                if (status === "success") {

                    if (data.result && data.result.status === false) {
                        toastr.error(data.message)
                    }
                    $("#modalContainer").html(data);
                    $("#upsertBookModal").modal("show");
                }
            })
        }

        function getUpdateBookModal(bookId) {
            $.get("/Book/ShowUpsertBookModal", { bookId }, function (data, status) {
          
                if (status === "success") {

                    if (data.result && data.result.status === false) {
                        toastr.error(data.message)
                    }
                    $("#modalContainer").html(data);
                    $("#upsertBookModal").modal("show");
                }
            })
        }
    </script>
}